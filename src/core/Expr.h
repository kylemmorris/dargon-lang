/*
 * Dargon Programming Language
 * (C) Kyle Morris 2023 - See LICENSE.txt for license information
 * 
 * FILE: Expr.h
 * 
 * DESCRIPTION: This file is automatically generated by "tools/GenDargonStmtExpr.py". It includes all the expression classes.
 * 
 * SINCE: v0.1
 * 
 */ 
#ifndef DARGON_EXPR_H
#define DARGON_EXPR_H

#include <string>
#include "Token.h"

namespace dargon {

	/**
	 * @brief The base class of all Expressions.
	 *
	*/
	class Expr{
		template<typename T>
		virtual T Accept(IVisitor<T>* visitor) = 0;
	};

	class Binary : public Expr {
	public:
		const Expr* left;
		const Token op;
		const Expr* right;
		Binary(Expr* left, Token op, Expr* right)
		: left(left), op(op), right(right){}
	};

	class Grouping : public Expr {
	public:
		const Expr* expression;
		Grouping(Expr* expression)
		: expression(expression){}
	};

	class Literal : public Expr {
	public:
		const void* value;
		Literal(void* value)
		: value(value){}
	};

	class Unary : public Expr {
	public:
		const Token op;
		const Expr* right;
		Unary(Token op, Expr* right)
		: op(op), right(right){}
	};

	template<typename T>
	class IVisitor {
		virtual T VisitBinaryExpr(Binary* expr) = 0;
		virtual T VisitGroupingExpr(Grouping* expr) = 0;
		virtual T VisitLiteralExpr(Literal* expr) = 0;
		virtual T VisitUnaryExpr(Unary* expr) = 0;
	};
};
#endif