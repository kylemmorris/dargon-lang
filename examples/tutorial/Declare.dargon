(#
    Declare.dargon
    Part of the Dargon Tutorial
    Created by Kyle Morris
#)

# Variable declarations
int myAge = 25 # <- Given a value
int a	       # <- Given the default int value (0)
int? b	       # <- Given the value 'none'

# NOTE: 'int' and 'int?' are NOT the same type!

# Constant declarations
# 'fixed' means once the value is "explicitely" assigned, it cannot be changed
# Constants can be created by providing a value
fixed bool TRUE = true	# <- This is a constant
fixed bool FALSE	# <- Given the default value
fixed bool? NONE	# <- Given the value 'none'

FALSE = false		# <- This is legal! But only once...

# Multiple declarations
int x, y, z = 1, 2, 3
int w, fixed bool er = 1, false

# Compound-type declarations
int[] ids	# <- An array of unknown length
int[3] ids2 # <- An array of pre-allocated length, each one is the int default value
bool[6] flags = [false, true, false, false, true, false]  # <- An array provided with a value
bool[]? maybe	# <- An array of unknown length with value 'none'.
uint[100]? what # <- An array of known length, but still 'none' value.

int[string] mapping = ["1" : 1, "2" : 2]	# <- A map type.
int[string]? map10							# <- A map type with value 'none'.

# Function declarations
